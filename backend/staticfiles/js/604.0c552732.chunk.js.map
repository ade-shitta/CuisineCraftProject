{"version":3,"file":"static/js/604.0c552732.chunk.js","mappings":"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","sources":["components/LoadingSpinner.tsx","components/Header.tsx","components/RecipeInstructions.tsx","pages/RecipeDetailsPage.tsx"],"sourcesContent":["import React from 'react'\r\n\r\ninterface LoadingSpinnerProps {\r\n  size?: 'sm' | 'md' | 'lg';\r\n  color?: string;\r\n  message?: string;\r\n}\r\n\r\nconst LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ \r\n  size = 'md', \r\n  color = 'white',\r\n  message\r\n}) => {\r\n  const textSize = {\r\n    sm: 'text-sm',\r\n    md: 'text-base',\r\n    lg: 'text-xl'\r\n  };\r\n  \r\n  const dotSize = {\r\n    sm: '8px',\r\n    md: '10px',\r\n    lg: '12px'\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-red-400 flex flex-col items-center justify-center\">\r\n      <div className=\"flex flex-col items-center\">\r\n        {/* Bouncing dots animation only */}\r\n        <div className=\"flex space-x-3\">\r\n          {[...Array(3)].map((_, i) => (\r\n            <div \r\n              key={i} \r\n              className={`bg-${color} rounded-full animate-bounce`}\r\n              style={{ \r\n                width: dotSize[size],\r\n                height: dotSize[size],\r\n                animationDelay: `${i * 0.1}s`\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n        \r\n        {message && (\r\n          <div className={`mt-4 text-${color} ${textSize[size]} font-medium loading-dots`}>\r\n            {message}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default React.memo(LoadingSpinner)","\r\n\r\nimport { useState, useRef, useEffect } from \"react\"\r\nimport { useNavigate, useLocation } from \"react-router-dom\"\r\nimport { useAuth } from \"../context/AuthContext\"\r\n\r\ninterface HeaderProps {\r\n  showMenu?: boolean\r\n}\r\n\r\nconst Header = ({ showMenu = true }: HeaderProps) => {\r\n  const { user, logout } = useAuth()\r\n  const navigate = useNavigate()\r\n  const location = useLocation()\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\r\n  const menuRef = useRef<HTMLDivElement>(null) // Add ref for the menu container\r\n\r\n  // Determine current path\r\n  const currentPath = location.pathname\r\n\r\n  // Handle clicks outside the menu\r\n  useEffect(() => {\r\n    function handleClickOutside(event: MouseEvent) {\r\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n        setIsMenuOpen(false)\r\n      }\r\n    }\r\n\r\n    // Add event listener when menu is open\r\n    if (isMenuOpen) {\r\n      document.addEventListener(\"mousedown\", handleClickOutside)\r\n    }\r\n\r\n    // Clean up event listener\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside)\r\n    }\r\n  }, [isMenuOpen])\r\n\r\n  const toggleMenu = () => {\r\n    setIsMenuOpen(!isMenuOpen)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {showMenu && (\r\n        <div ref={menuRef}>\r\n          <button \r\n            onClick={toggleMenu} \r\n            className=\"w-10 h-10 bg-white rounded-full flex items-center justify-center shadow-md\"\r\n            aria-label=\"Menu\"\r\n            title=\"Menu\"\r\n          >\r\n            <svg \r\n              xmlns=\"http://www.w3.org/2000/svg\" \r\n              className=\"h-6 w-6 text-gray-500\" \r\n              fill=\"none\" \r\n              viewBox=\"0 0 24 24\" \r\n              stroke=\"currentColor\"\r\n            >\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\r\n            </svg>\r\n          </button>\r\n\r\n          {isMenuOpen && (\r\n            <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2 z-20\">\r\n              <div className=\"px-4 py-2 text-sm text-gray-700\">Hi, {user?.username || \"Guest\"}</div>\r\n              <hr className=\"my-1\" />\r\n              \r\n              {/* Show Home button only if not on homepage */}\r\n              {currentPath !== \"/home\" && (\r\n                <button\r\n                  onClick={() => {\r\n                    navigate(\"/home\")\r\n                    setIsMenuOpen(false)\r\n                  }}\r\n                  className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\r\n                >\r\n                  Home\r\n                </button>\r\n              )}\r\n              \r\n              {/* Show Profile button only if not on profile page */}\r\n              {currentPath !== \"/profile\" && (\r\n                <button\r\n                  onClick={() => {\r\n                    navigate(\"/profile\")\r\n                    setIsMenuOpen(false)\r\n                  }}\r\n                  className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\r\n                >\r\n                  Profile\r\n                </button>\r\n              )}\r\n              \r\n              {/* Always show Search by Ingredient unless on that page */}\r\n              {currentPath !== \"/ingredient-recommendations\" && (\r\n                <button\r\n                  onClick={() => {\r\n                    navigate(\"/ingredient-recommendations\")\r\n                    setIsMenuOpen(false)\r\n                  }}\r\n                  className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\r\n                >\r\n                  Search by Ingredient\r\n                </button>\r\n              )}\r\n              \r\n              <hr className=\"my-1\" />\r\n              <button\r\n                onClick={() => {\r\n                  logout()\r\n                  navigate(\"/\")\r\n                  setIsMenuOpen(false)\r\n                }}\r\n                className=\"block w-full text-left px-4 py-2 text-sm text-red-500 hover:bg-gray-100\"\r\n              >\r\n                Logout\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header","import React, { useState } from \"react\";\r\n\r\ninterface InstructionStep {\r\n  text: string;\r\n  completed: boolean;\r\n}\r\n\r\ninterface RecipeInstructionsProps {\r\n  rawInstructions: string[];\r\n  recipeId: string; // Add recipeId prop\r\n  onComplete?: (recipeId: string) => void; // Update to pass recipeId\r\n}\r\n\r\nconst RecipeInstructions: React.FC<RecipeInstructionsProps> = ({ \r\n  rawInstructions,\r\n  recipeId,\r\n  onComplete\r\n}) => {\r\n  // Process instructions into clean steps\r\n  const processedSteps = React.useMemo(() => {\r\n    return rawInstructions\r\n      .map(step => step.trim())\r\n      .filter(step => step && !/^\\d+\\.?\\s*$/.test(step))\r\n      .map(text => ({ text, completed: false }));\r\n  }, [rawInstructions]);\r\n  \r\n  const [steps, setSteps] = useState<InstructionStep[]>(processedSteps);\r\n  const [cookingMode, setCookingMode] = useState(false);\r\n  const [completionRecorded, setCompletionRecorded] = useState(false);\r\n  \r\n  // Track progress\r\n  const progress = steps.filter(step => step.completed).length / steps.length;\r\n  const allCompleted = steps.every(step => step.completed);\r\n  \r\n  // Toggle step completion\r\n  const toggleStep = (index: number) => {\r\n    const newSteps = [...steps];\r\n    newSteps[index].completed = !newSteps[index].completed;\r\n    setSteps(newSteps);\r\n    \r\n    // Check if all steps are now completed\r\n    const nowAllCompleted = newSteps.every(step => step.completed);\r\n    \r\n    // If all steps are completed and completion hasn't been recorded yet\r\n    if (nowAllCompleted && !completionRecorded && onComplete) {\r\n      onComplete(recipeId);\r\n      setCompletionRecorded(true);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"recipe-instructions\">\r\n      <div className=\"flex justify-between items-center mb-4\">\r\n        <h2 className=\"text-xl font-bold text-gray-800\">Instructions</h2>\r\n        <button \r\n          onClick={() => setCookingMode(!cookingMode)}\r\n          className={`px-3 py-1 rounded-full text-sm font-medium ${\r\n            cookingMode \r\n              ? \"bg-red-500 text-white\" \r\n              : \"bg-gray-200 text-gray-700 hover:bg-gray-300\"\r\n          }`}\r\n        >\r\n          {cookingMode ? \"Exit Cooking Mode\" : \"Start Cooking\"}\r\n        </button>\r\n      </div>\r\n      \r\n      {/* Progress bar */}\r\n      {cookingMode && steps.length > 0 && (\r\n        <div className=\"mb-4\">\r\n          <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n            <div \r\n              className=\"bg-red-500 h-2.5 rounded-full transition-all duration-300 ease-in-out\"\r\n              style={{ width: `${progress * 100}%` }}\r\n            ></div>\r\n          </div>\r\n          <p className=\"text-sm text-gray-500 mt-1 text-right\">\r\n            {Math.round(progress * 100)}% complete\r\n          </p>\r\n        </div>\r\n      )}\r\n      \r\n      {/* Instructions list */}\r\n      <ul className=\"space-y-4\">\r\n        {steps.map((step, index) => (\r\n          <li \r\n            key={index} \r\n            className={`p-3 rounded-lg transition-all duration-200 cursor-pointer ${\r\n              cookingMode \r\n                ? \"bg-white shadow-sm border border-gray-100\" \r\n                : \"\"\r\n            } ${step.completed ? \"bg-green-50\" : \"\"}`}\r\n            onClick={() => cookingMode && toggleStep(index)}\r\n          >\r\n            <div className=\"flex items-start gap-3\">\r\n              {cookingMode && (\r\n                <>\r\n                  <div \r\n                    className=\"flex-shrink-0 w-5 h-5 border border-gray-300 rounded bg-white overflow-hidden relative\"\r\n                    style={{ minWidth: '1.25rem' }} \r\n                  >\r\n                    {step.completed && (\r\n                      <svg className=\"w-5 h-5\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\r\n                        <path \r\n                          fillRule=\"evenodd\" \r\n                          d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 111.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" \r\n                          clipRule=\"evenodd\" \r\n                        />\r\n                      </svg>\r\n                    )}\r\n                  </div>\r\n                  <span \r\n                    className={`ml-2 ${step.completed ? \"line-through text-gray-400\" : \"text-gray-800\"}`}\r\n                  >\r\n                    {step.text}\r\n                  </span>\r\n                </>\r\n              )}\r\n              {!cookingMode && (\r\n                <span className=\"text-gray-800\">\r\n                  {step.text}\r\n                </span>\r\n              )}\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n      \r\n      {/* Completion message */}\r\n      {allCompleted && cookingMode && (\r\n        <div className=\"mt-6 p-4 bg-green-100 text-green-700 rounded-lg text-center\">\r\n          <p className=\"font-medium\">You've completed all the steps! Enjoy your meal! 🎉</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecipeInstructions;","import { useEffect, useState, useCallback } from \"react\"\r\nimport { useParams, useNavigate, useLocation } from \"react-router-dom\"\r\nimport Header from \"../components/Header\"\r\nimport { recipes } from \"../services/api\"\r\nimport { useAuth } from \"../context/AuthContext\"\r\nimport React from 'react'\r\nimport LoadingSpinner from '../components/LoadingSpinner'\r\nimport RecipeInstructions from \"../components/RecipeInstructions\"\r\n\r\n// Type definitions\r\ntype Ingredient = {\r\n  name: string;\r\n  amount: string;\r\n};\r\n\r\ntype Recipe = {\r\n  recipe_id: string;\r\n  title: string;\r\n  image_url?: string;\r\n  ingredients: Ingredient[];\r\n  instructions: string[];\r\n  isFavorite: boolean;\r\n  dietary_tags: string[];\r\n}\r\n\r\n// Memoize UI components\r\nconst DietaryTags: React.FC<{ tags: string[] }> = React.memo(({ tags }) => (\r\n  <div className=\"mb-6 text-center\">\r\n    <h2 className=\"text-xl font-bold text-black mb-4\">Dietary Tags</h2>\r\n    <div className=\"flex flex-wrap justify-center gap-2\">\r\n      {tags.map((tag, index) => (\r\n        <span\r\n          key={index}\r\n          className=\"bg-red-300 text-black px-4 py-2 rounded-full text-sm font-medium shadow-sm\"\r\n        >\r\n          {tag}\r\n        </span>\r\n      ))}\r\n    </div>\r\n  </div>\r\n));\r\n\r\nconst IngredientList: React.FC<{ ingredients: Ingredient[] }> = React.memo(({ ingredients }) => (\r\n  <div className=\"grid grid-cols-2 gap-4 mx-auto max-w-xl\">\r\n    {ingredients.map((ingredient, index) => (\r\n      <div key={index} className=\"bg-red-200 rounded-3xl p-4 flex justify-between items-center\">\r\n        <p className=\"text-black font-medium\">{ingredient.name}</p>\r\n        <p className=\"text-black\">{ingredient.amount}</p>\r\n      </div>\r\n    ))}\r\n  </div>\r\n));\r\n\r\ninterface InstructionModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  instructions: string[];\r\n  recipeId: string;\r\n}\r\n\r\nconst InstructionModal: React.FC<InstructionModalProps> = React.memo(({ isOpen, onClose, instructions, recipeId }) => {\r\n  const [completionStatus, setCompletionStatus] = useState({\r\n    isCompleted: false,\r\n    isSubmitting: false,\r\n    error: null as string | null\r\n  });\r\n  \r\n  if (!isOpen) return null;\r\n  \r\n  const handleCookCompleted = async (recipeId: string) => {\r\n    try {\r\n      setCompletionStatus(prev => ({ ...prev, isSubmitting: true }));\r\n      \r\n      // Pass recipeId as string directly\r\n      await recipes.markRecipeCooked(recipeId);\r\n      \r\n      setCompletionStatus({\r\n        isCompleted: true,\r\n        isSubmitting: false,\r\n        error: null\r\n      });\r\n      \r\n    } catch (error) {\r\n      console.error(\"Failed to record recipe completion:\", error);\r\n      setCompletionStatus({\r\n        isCompleted: false,\r\n        isSubmitting: false,\r\n        error: \"Failed to record your cooking achievement. Please try again.\"\r\n      });\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div \r\n      className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center p-4 z-50\"\r\n      onClick={onClose}\r\n    >\r\n      <div \r\n        className=\"bg-white rounded-2xl w-full max-w-lg max-h-[80vh] overflow-y-auto shadow-xl\"\r\n        onClick={(e) => e.stopPropagation()}\r\n      >\r\n        <div className=\"flex justify-between items-center p-4 border-b\">\r\n          <h2 className=\"text-xl font-bold text-gray-800\">Recipe Instructions</h2>\r\n          <button \r\n            onClick={onClose} \r\n            className=\"text-gray-500 hover:text-gray-700 rounded-full hover:bg-gray-100 p-1\"\r\n            aria-label=\"Close\"\r\n            title=\"Close\"\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        \r\n        <div className=\"p-4\">\r\n          <RecipeInstructions \r\n            rawInstructions={instructions}\r\n            recipeId={recipeId}\r\n            onComplete={handleCookCompleted} \r\n          />\r\n          \r\n          {completionStatus.error && (\r\n            <div className=\"mt-4 p-3 bg-red-100 text-red-700 rounded-md text-sm\">\r\n              {completionStatus.error}\r\n            </div>\r\n          )}\r\n        </div>\r\n        \r\n        <div className=\"border-t p-4 flex justify-end\">\r\n          <button \r\n            onClick={onClose}\r\n            className=\"bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded-full\"\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n});\r\n\r\nconst RecipeDetailsPage: React.FC = () => {\r\n  const { id } = useParams<{ id: string }>();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const { isAuthenticated, isLoading: authLoading, user } = useAuth();\r\n  const [recipe, setRecipe] = useState<Recipe | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\r\n  const [showLoader, setShowLoader] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (!id || !isAuthenticated) return;\r\n\r\n    setLoading(true);\r\n    const loaderTimer = setTimeout(() => {\r\n      if (loading) setShowLoader(true);\r\n    }, 300);\r\n\r\n    const fetchRecipe = async () => {\r\n      try {\r\n        const response = await recipes.getById(id);\r\n        \r\n        const instructions = response.data.instructions.split('\\n').filter(Boolean);\r\n        const ingredients = Array.isArray(response.data.ingredients) \r\n          ? response.data.ingredients \r\n          : [];\r\n        \r\n        setRecipe({\r\n          ...response.data,\r\n          instructions,\r\n          ingredients,\r\n          dietary_tags: response.data.dietary_tags || []\r\n        });\r\n        setLoading(false);\r\n      } catch (err) {\r\n        console.error(\"Error fetching recipe:\", err);\r\n        setError(\"Failed to load recipe\");\r\n        setLoading(false);\r\n      } finally {\r\n        setShowLoader(false);\r\n      }\r\n    };\r\n\r\n    fetchRecipe();\r\n    return () => clearTimeout(loaderTimer);\r\n  }, [id, isAuthenticated, location.key]);\r\n\r\n  useEffect(() => {\r\n    if (!authLoading && !isAuthenticated) {\r\n      navigate(\"/login\");\r\n    }\r\n  }, [authLoading, isAuthenticated, navigate]);\r\n\r\n  const handleModalOpen = useCallback(() => setShowModal(true), []);\r\n  const handleModalClose = useCallback(() => setShowModal(false), []);\r\n  const handleBackClick = useCallback(() => {\r\n    if (window.history.length > 1) {\r\n      navigate(-1);\r\n    } else {\r\n      navigate('/home');\r\n    }\r\n  }, [navigate]);\r\n\r\n  const handleToggleFavorite = useCallback(async () => {\r\n    if (!recipe) return;\r\n    \r\n    try {\r\n      await recipes.toggleFavorite(recipe.recipe_id);\r\n      setRecipe(prev => prev ? { ...prev, isFavorite: !prev.isFavorite } : null);\r\n    } catch (error) {\r\n      console.error(\"Error toggling favorite:\", error);\r\n    }\r\n  }, [recipe]);\r\n\r\n  if (loading) {\r\n    return showLoader ? <LoadingSpinner /> : null; // Don't render anything during initial load if spinner isn't showing yet\r\n  }\r\n\r\n  if (error || !recipe) {\r\n    return (\r\n      <div className=\"min-h-screen bg-red-400 flex justify-center items-center\">\r\n        <p className=\"text-white\">{error || \"Recipe not found\"}</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-red-400 p-4\">\r\n      <div className=\"flex justify-between items-center mb-8 px-1\">\r\n        <div className=\"flex-1\">\r\n          <button \r\n            onClick={handleBackClick}\r\n            className=\"bg-red-500 hover:bg-red-600 text-white rounded-full w-10 h-10 flex items-center justify-center shadow-md\"\r\n            aria-label=\"Go back\"\r\n            title=\"Go back\"\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        <div className=\"text-center flex-1\">\r\n          <h1 className=\"text-white text-2xl font-bold\">{recipe.title}</h1>\r\n        </div>\r\n        <div className=\"flex-1 flex justify-end pt-1\">\r\n          <Header />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex justify-center mb-8 px-6 relative\">\r\n        {recipe.image_url && (\r\n          <div className=\"relative inline-block\">\r\n            <img\r\n              src={recipe.image_url}\r\n              alt={recipe.title}\r\n              className=\"rounded-3xl w-full max-w-md h-44 object-cover shadow-md\"\r\n              loading=\"eager\"\r\n            />\r\n            <button \r\n              className=\"absolute top-3 right-3 bg-pink-100 rounded-full p-2 shadow-md\"\r\n              onClick={handleToggleFavorite}\r\n              aria-label={recipe.isFavorite ? \"Remove from favorites\" : \"Add to favorites\"}\r\n              title={recipe.isFavorite ? \"Remove from favorites\" : \"Add to favorites\"}\r\n            >\r\n              <svg \r\n                xmlns=\"http://www.w3.org/2000/svg\" \r\n                className={`h-6 w-6 ${recipe.isFavorite ? 'text-red-500' : 'text-gray-400'}`}\r\n                viewBox=\"0 0 20 20\" \r\n                fill=\"currentColor\"\r\n              >\r\n                <path \r\n                  fillRule=\"evenodd\" \r\n                  d=\"M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z\" \r\n                  clipRule=\"evenodd\" \r\n                />\r\n              </svg>\r\n            </button>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"px-6 pb-16\">\r\n        <div className=\"flex justify-between items-center mb-5\">\r\n          <h2 className=\"text-xl font-bold text-black\">Ingredients</h2>\r\n          <a \r\n            href=\"#\"\r\n            onClick={(e) => {\r\n              e.preventDefault();\r\n              handleModalOpen();\r\n            }}\r\n            className=\"text-blue-600 hover:text-blue-800 font-medium underline\"\r\n          >\r\n            View Recipe Details\r\n          </a>\r\n        </div>\r\n\r\n        {recipe.ingredients?.length > 0 ? (\r\n          <div className=\"bg-red-300 rounded-xl p-6\">\r\n            <h3 className=\"text-2xl font-bold text-gray-800 mb-4\">Ingredients</h3>\r\n            <ul className=\"space-y-2\">\r\n              {recipe.ingredients.map((ingredient, index) => (\r\n                <li key={index} className=\"flex items-start\">\r\n                  <span className=\"text-black text-lg mr-2\">•</span>\r\n                  <span className=\"text-black text-lg\">\r\n                    {ingredient.amount ? `${ingredient.amount} of ${ingredient.name}` : ingredient.name}\r\n                  </span>\r\n                </li>\r\n              ))}\r\n            </ul>\r\n          </div>\r\n        ) : (\r\n          <div className=\"bg-red-300 rounded-xl p-6 text-center\">\r\n            <p className=\"text-black\">No ingredients available for this recipe</p>\r\n          </div>\r\n        )}\r\n\r\n        <div className=\"mt-4 bg-yellow-100 border-l-4 border-yellow-500 p-4 rounded-md\">\r\n          <div className=\"flex items-start\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 text-yellow-600 mr-2 mt-0.5\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\" />\r\n            </svg>\r\n            <p className=\"text-sm text-gray-700\">\r\n              <span className=\"font-medium\">Note:</span> Nutritional values may vary depending on the specific brands and ingredients you purchase and choose to use.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      {showModal && (\r\n        <InstructionModal \r\n          isOpen={showModal}\r\n          onClose={handleModalClose}\r\n          instructions={recipe?.instructions || []}\r\n          recipeId={recipe?.recipe_id || ''}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default React.memo(RecipeDetailsPage);"],"names":["LoadingSpinner","_ref","size","color","message","dotSize","sm","md","lg","_jsx","className","children","_jsxs","Array","map","_","i","style","width","height","animationDelay","React","showMenu","user","logout","useAuth","navigate","useNavigate","location","useLocation","isMenuOpen","setIsMenuOpen","useState","menuRef","useRef","currentPath","pathname","useEffect","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","ref","onClick","toggleMenu","title","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","username","rawInstructions","recipeId","onComplete","processedSteps","step","trim","filter","test","text","completed","steps","setSteps","cookingMode","setCookingMode","completionRecorded","setCompletionRecorded","progress","length","allCompleted","every","Math","round","index","newSteps","toggleStep","_Fragment","minWidth","fillRule","clipRule","InstructionModal","_ref3","isOpen","onClose","instructions","completionStatus","setCompletionStatus","isCompleted","isSubmitting","error","e","stopPropagation","RecipeInstructions","async","prev","recipes","markRecipeCooked","console","RecipeDetailsPage","_recipe$ingredients","id","useParams","isAuthenticated","isLoading","authLoading","recipe","setRecipe","loading","setLoading","setError","showModal","setShowModal","showLoader","setShowLoader","loaderTimer","setTimeout","response","getById","data","split","Boolean","ingredients","isArray","dietary_tags","err","fetchRecipe","clearTimeout","key","handleModalOpen","useCallback","handleModalClose","handleBackClick","window","history","handleToggleFavorite","toggleFavorite","recipe_id","isFavorite","Header","image_url","src","alt","href","preventDefault","ingredient","amount","name"],"sourceRoot":""}
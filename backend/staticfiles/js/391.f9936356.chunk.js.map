{"version":3,"file":"static/js/391.f9936356.chunk.js","mappings":"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","sources":["context/AuthContext.tsx","App.tsx"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from \"react\";\r\nimport { auth } from \"../services/api\";\r\nimport { fetchCSRFToken } from \"../services/csrf\";\r\nimport { cacheService } from \"../services/cache\";\r\n\r\ntype User = {\r\n  id: string;\r\n  username: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  dateOfBirth?: string;\r\n  profileImage?: string;\r\n};\r\n\r\ntype AuthContextType = {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean; // Add loading state\r\n  login: (username: string, password: string) => Promise<void>;\r\n  signup: (userData: any) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  updateUser: (userData: User) => void; // Add method to update user data\r\n};\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\n// Add local storage helpers for better persistence\r\nconst saveUserToStorage = (user: User | null) => {\r\n  if (user) {\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n  } else {\r\n    localStorage.removeItem('user');\r\n  }\r\n};\r\n\r\nconst getUserFromStorage = (): User | null => {\r\n  const storedUser = localStorage.getItem('user');\r\n  return storedUser ? JSON.parse(storedUser) : null;\r\n};\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  // Initialize from localStorage for immediate state reflection\r\n  const [user, setUser] = useState<User | null>(getUserFromStorage());\r\n  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(!!getUserFromStorage());\r\n  const [isLoading, setIsLoading] = useState<boolean>(true); // Add loading state\r\n\r\n  // Custom setter for user that also updates localStorage\r\n  const setUserAndStorage = (newUser: User | null) => {\r\n    setUser(newUser);\r\n    saveUserToStorage(newUser);\r\n    setIsAuthenticated(!!newUser);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in\r\n    const checkAuthStatus = async () => {\r\n      try {\r\n        // First ensure we have a valid CSRF token\r\n        await fetchCSRFToken();\r\n        \r\n        // Check if the user is authenticated with a conditional check\r\n        const isAuth = await auth.checkIsAuthenticated();\r\n        \r\n        // Only make the profile request if user is authenticated\r\n        if (isAuth) {\r\n          const response = await auth.getProfile();\r\n          \r\n          setUserAndStorage({\r\n            id: response.data.id,\r\n            username: response.data.username,\r\n            firstName: response.data.firstName,\r\n            lastName: response.data.lastName,\r\n            email: response.data.email,\r\n            dateOfBirth: response.data.dateOfBirth,\r\n            profileImage: response.data.profileImage,\r\n          });\r\n        } else {\r\n          setUserAndStorage(null);\r\n        }\r\n      } catch (error) {\r\n        // Handle silently - user is not authenticated\r\n        setUserAndStorage(null);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  const login = async (username: string, password: string) => {\r\n    try {\r\n      // First ensure CSRF token is fresh\r\n      await fetchCSRFToken();\r\n      \r\n      const response = await auth.login(username, password);\r\n      // Transform snake_case from Django to camelCase for React\r\n      setUserAndStorage({\r\n        id: response.data.id,\r\n        username: response.data.username,\r\n        firstName: response.data.firstName, \r\n        lastName: response.data.lastName,   \r\n        email: response.data.email,\r\n        dateOfBirth: response.data.dateOfBirth,\r\n        profileImage: response.data.profileImage,\r\n      });\r\n      \r\n      // Clear any cached recommendations from previous user\r\n      cacheService.invalidate(/^recommendations:/);\r\n      cacheService.invalidate(/^recipes:/);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const signup = async (userData: any) => {\r\n    try {\r\n      await fetchCSRFToken();\r\n      const response = await auth.register(userData);\r\n      setUserAndStorage(response.data);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const logout = async () => {\r\n    try {\r\n      await auth.logout();\r\n      // Clear all user-specific caches when logging out\r\n      cacheService.invalidate(/^recommendations:/);\r\n      cacheService.invalidate(/^recipes:/);\r\n      setUserAndStorage(null);\r\n    } catch (error) {\r\n      // Even if logout API fails, clear local state and caches\r\n      cacheService.invalidate(/^recommendations:/);\r\n      cacheService.invalidate(/^recipes:/);\r\n      setUserAndStorage(null);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  const updateUser = (userData: User) => {\r\n    setUserAndStorage(userData);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, isAuthenticated, isLoading, login, signup, logout, updateUser }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useAuth must be used within an AuthProvider\");\r\n  }\r\n  return context;\r\n};","import React, { lazy, Suspense, useState, useEffect } from \"react\"\r\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\"\r\nimport { AuthProvider } from \"./context/AuthContext\"\r\nimport LoadingSpinner from './components/LoadingSpinner'\r\n\r\n// Lazy load pages\r\nconst LaunchScreen = lazy(() => import('./pages/LaunchScreen'))\r\nconst HomePage = lazy(() => import('./pages/HomePage'))\r\nconst SignupPage = lazy(() => import('./pages/SignupPage'))\r\nconst LoginPage = lazy(() => import('./pages/LoginPage'))\r\nconst DietaryPrefsPage = lazy(() => import('./pages/DietaryPrefsPage'))\r\nconst RecipeDetailsPage = lazy(() => import('./pages/RecipeDetailsPage'))\r\nconst ProfilePage = lazy(() => import('./pages/ProfilePage'))\r\nconst FavoritesPage = lazy(() => import('./pages/FavoritesPage'))\r\nconst IngredientRecommendationPage = lazy(() => import('./pages/IngredientRecommendationPage'))\r\nconst RecipesPage = lazy(() => import('./pages/RecipesPage'))\r\n\r\n// Improved loading spinner that only shows for genuinely slow loads\r\nconst PageLoading = () => {\r\n  const [show, setShow] = useState(false);\r\n  \r\n  useEffect(() => {\r\n    // Only show spinner for loads taking longer than 1500ms\r\n    const timer = setTimeout(() => {\r\n      setShow(true);\r\n    }, 1500);\r\n    \r\n    return () => clearTimeout(timer);\r\n  }, []);\r\n  \r\n  // Return empty div for fast loads, spinner only for slow loads\r\n  return show ? (\r\n    <div className=\"min-h-screen bg-red-400 flex flex-col items-center justify-center\">\r\n      <div className=\"loading loading-bars loading-lg text-white\"></div>\r\n      <div className=\"mt-4 text-white font-medium\">Loading</div>\r\n    </div>\r\n  ) : <div className=\"min-h-screen bg-red-400\"></div>; // Empty div maintains background color\r\n};\r\n\r\nfunction App() {\r\n  return (\r\n    <AuthProvider>\r\n      <Router>\r\n        <div className=\"min-h-screen bg-red-400\">\r\n          <Suspense fallback={<PageLoading />}>\r\n            <Routes>\r\n              <Route path=\"/\" element={<LaunchScreen />} />\r\n              <Route path=\"/home\" element={<HomePage />} />\r\n              <Route path=\"/signup\" element={<SignupPage />} />\r\n              <Route path=\"/login\" element={<LoginPage />} />\r\n              <Route path=\"/dietary-preferences\" element={<DietaryPrefsPage />} />\r\n              <Route path=\"/recipe/:id\" element={<RecipeDetailsPage />} />\r\n              <Route path=\"/profile\" element={<ProfilePage />} />\r\n              <Route path=\"/favorites\" element={<FavoritesPage />} />\r\n              <Route path=\"/ingredient-recommendations\" element={<IngredientRecommendationPage />} />\r\n              <Route path=\"/recipes\" element={<RecipesPage />} />\r\n            </Routes>\r\n          </Suspense>\r\n        </div>\r\n      </Router>\r\n    </AuthProvider>\r\n  )\r\n}\r\n\r\nexport default App"],"names":["AuthContext","createContext","undefined","getUserFromStorage","storedUser","localStorage","getItem","JSON","parse","AuthProvider","_ref","children","user","setUser","useState","isAuthenticated","setIsAuthenticated","isLoading","setIsLoading","setUserAndStorage","newUser","setItem","stringify","removeItem","saveUserToStorage","useEffect","async","fetchCSRFToken","auth","checkIsAuthenticated","response","getProfile","id","data","username","firstName","lastName","email","dateOfBirth","profileImage","error","checkAuthStatus","_jsx","Provider","value","login","password","cacheService","invalidate","signup","register","userData","logout","updateUser","useAuth","context","useContext","Error","LaunchScreen","lazy","HomePage","SignupPage","LoginPage","DietaryPrefsPage","RecipeDetailsPage","ProfilePage","FavoritesPage","IngredientRecommendationPage","RecipesPage","PageLoading","show","setShow","timer","setTimeout","clearTimeout","_jsxs","className","Router","Suspense","fallback","Routes","Route","path","element"],"sourceRoot":""}
{"version":3,"file":"static/js/218.be068796.chunk.js","mappings":"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","sources":["components/AllergyItem.tsx","components/DietaryIcons.ts","pages/DietaryPrefsPage.tsx","components/Header.tsx"],"sourcesContent":["import React from \"react\"\r\n\r\ninterface AllergyItemProps {\r\n  name: string\r\n  image: string\r\n  isSelected: boolean\r\n  onToggle: (name: string) => void\r\n  onError?: (e: React.SyntheticEvent<HTMLImageElement, Event>) => void\r\n  textColor?: string // Add optional textColor prop\r\n}\r\n\r\nconst AllergyItem = ({ \r\n  name, \r\n  image, \r\n  isSelected, \r\n  onToggle, \r\n  onError,\r\n  textColor = \"text-gray-800\" // Default value if not provided\r\n}: AllergyItemProps) => {\r\n  return (\r\n    <div\r\n      className={`flex flex-col items-center cursor-pointer ${isSelected ? \"opacity-50\" : \"\"}`}\r\n      onClick={() => onToggle(name)}\r\n    >\r\n      <div className=\"relative mb-1\">\r\n        <>\r\n          <img \r\n            src={image || \"\"}\r\n            alt={name} \r\n            className=\"w-16 h-16 rounded-lg object-cover\"\r\n            onError={(e) => {\r\n              e.currentTarget.style.display = 'none';\r\n              if (onError) onError(e);\r\n            }} \r\n          />\r\n          {(image === '' || !image) && (\r\n            <div className=\"w-16 h-16 rounded-lg bg-white flex items-center justify-center\">\r\n              <div className=\"text-2xl text-red-400 font-bold\">\r\n                {name.substring(0, 1).toUpperCase()}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </>\r\n        {isSelected && (\r\n          <div className=\"absolute inset-0 flex items-center justify-center bg-black/30 rounded-lg\">\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              className=\"h-8 w-8 text-white\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              stroke=\"currentColor\"\r\n            >\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M6 18L18 6M6 6l12 12\" />\r\n            </svg>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <span className={`text-xs text-center ${textColor}`}>{name}</span>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AllergyItem","import vegetarian from '../assets/dietary/vegetarian.png';\r\nimport veganFriendly from '../assets/dietary/vegan-friendly.png';\r\nimport glutenFree from '../assets/dietary/gluten-free.png';\r\nimport halal from '../assets/dietary/halal.png';\r\nimport dairyFree from '../assets/dietary/dairy-free.png';\r\nimport eggFree from '../assets/dietary/egg-free.png';\r\nimport seafoodFree from '../assets/dietary/seafood-free.png';\r\nimport sesameFree from '../assets/dietary/sesame-free.png';\r\nimport soyFree from '../assets/dietary/soy-free.png';\r\nimport sulphiteFree from '../assets/dietary/sulphite-free.png';\r\nimport treeNutFree from '../assets/dietary/tree-nut-free.png';\r\nimport peanutFree from '../assets/dietary/peanut-free.png';\r\nimport wheatFree from '../assets/dietary/wheat-free.png';\r\n\r\nconst dietaryIcons: Record<string, string> = {\r\n  'vegetarian': vegetarian,\r\n  'vegan-friendly': veganFriendly,\r\n  'gluten-free': glutenFree,\r\n  'halal': halal,\r\n  'dairy-free': dairyFree,\r\n  'egg-free': eggFree,\r\n  'seafood-free': seafoodFree,\r\n  'sesame-free': sesameFree,\r\n  'soy-free': soyFree,\r\n  'sulphite-free': sulphiteFree,\r\n  'tree-nut-free': treeNutFree,\r\n  'peanut-free': peanutFree,\r\n  'wheat-free': wheatFree,\r\n};\r\n\r\nexport default dietaryIcons;\r\n","import { useState, useEffect } from \"react\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { useAuth } from \"../context/AuthContext\"\r\nimport Header from \"../components/Header\"\r\nimport { recommendations } from \"../services/api\"\r\nimport AllergyItem from \"../components/AllergyItem\"\r\nimport dietaryIcons from '../components/DietaryIcons'\r\n\r\ninterface DietaryPreference {\r\n  id: string;\r\n  name: string;\r\n  isSelected: boolean;\r\n}\r\n\r\nconst DietaryPrefsPage = () => {\r\n  const navigate = useNavigate()\r\n  const { isAuthenticated, isLoading } = useAuth()\r\n  const [loading, setLoading] = useState(true)\r\n  const [saving, setSaving] = useState(false)\r\n  const [preferences, setPreferences] = useState<DietaryPreference[]>([])\r\n  \r\n  useEffect(() => {\r\n    if (!isLoading && !isAuthenticated) {\r\n      navigate(\"/login\")\r\n      return\r\n    }\r\n  }, [isAuthenticated, navigate, isLoading])\r\n\r\n  useEffect(() => {\r\n    if (!isAuthenticated) return;\r\n    \r\n    const fetchPreferences = async () => {\r\n      try {\r\n        const response = await recommendations.getDietaryPreferences();\r\n        setPreferences(response.data);\r\n        setLoading(false);\r\n      } catch (error) {\r\n        console.error(\"Failed to fetch dietary preferences\", error);\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    fetchPreferences();\r\n  }, [isAuthenticated]);\r\n\r\n  const togglePreference = (id: string) => {\r\n    setPreferences(preferences.map(pref => \r\n      pref.id === id ? { ...pref, isSelected: !pref.isSelected } : pref\r\n    ));\r\n  };\r\n\r\n  const handleSave = async () => {\r\n    setSaving(true);\r\n    try {\r\n      const selectedPreferences = preferences\r\n        .filter(pref => pref.isSelected)\r\n        .map(pref => pref.id);\r\n      \r\n      await recommendations.updateDietaryPreferences(selectedPreferences);\r\n      setSaving(false);\r\n      navigate('/recipes');\r\n    } catch (error) {\r\n      console.error(\"Failed to save preferences\", error);\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  // Handle image errors by showing a fallback\r\n  const handleImageError = (e: React.SyntheticEvent<HTMLImageElement, Event>) => {\r\n    e.currentTarget.src = \"/images/dietary/placeholder.png\";\r\n  };\r\n\r\n  if (loading || isLoading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-red-400 flex items-center justify-center\">\r\n        <div className=\"loading loading-spinner loading-lg text-white\"></div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-red-400 p-4\">\r\n      {/* Header */}\r\n      <div className=\"flex justify-between items-center mb-8 px-1\">\r\n        <div className=\"flex-1\">\r\n          <button\r\n            onClick={() => navigate(-1)}\r\n            className=\"bg-red-500 hover:bg-red-600 text-white rounded-full w-10 h-10 flex items-center justify-center shadow-md hover:shadow-lg transition-all duration-300 hover:scale-110\"\r\n            aria-label=\"Go back\"\r\n            title=\"Go back\"\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 19l-7-7 7-7\" />\r\n            </svg>\r\n          </button>\r\n        </div>\r\n        <div className=\"text-center flex-1\">\r\n          <h1 className=\"text-white text-2xl font-bold\">Dietary Preferences</h1>\r\n        </div>\r\n        <div className=\"flex-1 flex justify-end pt-1\">\r\n          <Header />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"container mx-auto\">\r\n        <div className=\"max-w-3xl mx-auto\">\r\n          {/* Description */}\r\n          <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4 mb-6 text-center\">\r\n            <p className=\"text-white\">\r\n              Select your dietary preferences to help us recommend suitable recipes for you.\r\n            </p>\r\n          </div>\r\n\r\n          {/* Preferences card */}\r\n          <div className=\"bg-white rounded-lg shadow-md overflow-hidden mb-8\">\r\n            <div className=\"p-6\">\r\n              <h2 className=\"font-semibold text-gray-800 mb-5 text-xl border-b-2 border-red-400 pb-2\">\r\n                Select Your Preferences\r\n              </h2>\r\n              \r\n              <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4\">\r\n                {preferences.map((preference) => (\r\n                  <AllergyItem\r\n                    key={preference.id}\r\n                    name={preference.name}\r\n                    image={dietaryIcons[preference.id] || ''}\r\n                    isSelected={preference.isSelected}\r\n                    onToggle={() => togglePreference(preference.id)}\r\n                    onError={handleImageError}\r\n                  />\r\n                ))}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Footer with save button */}\r\n            <div className=\"bg-gray-50 border-t border-gray-100 p-4 flex justify-end\">\r\n              <button \r\n                className=\"bg-red-500 hover:bg-red-600 text-white px-8 py-3 rounded-md shadow-md\"\r\n                onClick={handleSave}\r\n                disabled={saving}\r\n              >\r\n                {saving ? 'Saving...' : 'Save Preferences'}\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Information card */}\r\n          <div className=\"bg-white/10 backdrop-blur-sm rounded-lg p-4 mb-6 text-center\">\r\n            <p className=\"text-white text-sm\">\r\n              Your preferences help us filter recipes that match your dietary needs.\r\n              You can update these preferences anytime.\r\n            </p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default DietaryPrefsPage","\r\n\r\nimport { useState, useRef, useEffect } from \"react\"\r\nimport { useNavigate, useLocation } from \"react-router-dom\"\r\nimport { useAuth } from \"../context/AuthContext\"\r\n\r\ninterface HeaderProps {\r\n  showMenu?: boolean\r\n}\r\n\r\nconst Header = ({ showMenu = true }: HeaderProps) => {\r\n  const { user, logout } = useAuth()\r\n  const navigate = useNavigate()\r\n  const location = useLocation()\r\n  const [isMenuOpen, setIsMenuOpen] = useState(false)\r\n  const menuRef = useRef<HTMLDivElement>(null) // Add ref for the menu container\r\n\r\n  // Determine current path\r\n  const currentPath = location.pathname\r\n\r\n  // Handle clicks outside the menu\r\n  useEffect(() => {\r\n    function handleClickOutside(event: MouseEvent) {\r\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\r\n        setIsMenuOpen(false)\r\n      }\r\n    }\r\n\r\n    // Add event listener when menu is open\r\n    if (isMenuOpen) {\r\n      document.addEventListener(\"mousedown\", handleClickOutside)\r\n    }\r\n\r\n    // Clean up event listener\r\n    return () => {\r\n      document.removeEventListener(\"mousedown\", handleClickOutside)\r\n    }\r\n  }, [isMenuOpen])\r\n\r\n  const toggleMenu = () => {\r\n    setIsMenuOpen(!isMenuOpen)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {showMenu && (\r\n        <div ref={menuRef}>\r\n          <button \r\n            onClick={toggleMenu} \r\n            className=\"w-10 h-10 bg-white rounded-full flex items-center justify-center shadow-md\"\r\n            aria-label=\"Menu\"\r\n            title=\"Menu\"\r\n          >\r\n            <svg \r\n              xmlns=\"http://www.w3.org/2000/svg\" \r\n              className=\"h-6 w-6 text-gray-500\" \r\n              fill=\"none\" \r\n              viewBox=\"0 0 24 24\" \r\n              stroke=\"currentColor\"\r\n            >\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 6h16M4 12h16M4 18h16\" />\r\n            </svg>\r\n          </button>\r\n\r\n          {isMenuOpen && (\r\n            <div className=\"absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg py-2 z-20\">\r\n              <div className=\"px-4 py-2 text-sm text-gray-700\">Hi, {user?.username || \"Guest\"}</div>\r\n              <hr className=\"my-1\" />\r\n              \r\n              {/* Show Home button only if not on homepage */}\r\n              {currentPath !== \"/home\" && (\r\n                <button\r\n                  onClick={() => {\r\n                    navigate(\"/home\")\r\n                    setIsMenuOpen(false)\r\n                  }}\r\n                  className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\r\n                >\r\n                  Home\r\n                </button>\r\n              )}\r\n              \r\n              {/* Show Profile button only if not on profile page */}\r\n              {currentPath !== \"/profile\" && (\r\n                <button\r\n                  onClick={() => {\r\n                    navigate(\"/profile\")\r\n                    setIsMenuOpen(false)\r\n                  }}\r\n                  className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\r\n                >\r\n                  Profile\r\n                </button>\r\n              )}\r\n              \r\n              {/* Always show Search by Ingredient unless on that page */}\r\n              {currentPath !== \"/ingredient-recommendations\" && (\r\n                <button\r\n                  onClick={() => {\r\n                    navigate(\"/ingredient-recommendations\")\r\n                    setIsMenuOpen(false)\r\n                  }}\r\n                  className=\"block w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100\"\r\n                >\r\n                  Search by Ingredient\r\n                </button>\r\n              )}\r\n              \r\n              <hr className=\"my-1\" />\r\n              <button\r\n                onClick={() => {\r\n                  logout()\r\n                  navigate(\"/\")\r\n                  setIsMenuOpen(false)\r\n                }}\r\n                className=\"block w-full text-left px-4 py-2 text-sm text-red-500 hover:bg-gray-100\"\r\n              >\r\n                Logout\r\n              </button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header"],"names":["_ref","name","image","isSelected","onToggle","onError","textColor","_jsxs","className","onClick","children","_Fragment","_jsx","src","alt","e","currentTarget","style","display","substring","toUpperCase","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","DietaryPrefsPage","navigate","useNavigate","isAuthenticated","isLoading","useAuth","loading","setLoading","useState","saving","setSaving","preferences","setPreferences","useEffect","async","response","recommendations","getDietaryPreferences","data","error","console","fetchPreferences","handleImageError","title","Header","map","preference","AllergyItem","dietaryIcons","id","togglePreference","pref","selectedPreferences","filter","updateDietaryPreferences","disabled","showMenu","user","logout","location","useLocation","isMenuOpen","setIsMenuOpen","menuRef","useRef","currentPath","pathname","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","ref","toggleMenu","username"],"sourceRoot":""}